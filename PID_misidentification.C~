/*	
	
	Alice Morris
	MPhys Project 2015/16

	Script to calculate the momentum amplitude from the exsiting MC ntuple, 
	and rename the variables of interest while we're at it.

*/




#include <TLorentzVector.h>


void PID_misidentification() {

    // -- define tuple file name, tuple name and cuts to apply-----------------------
    // -- and also the name of the output file
    const std::string filename = "/afs/cern.ch/work/a/apmorris/private/cern/ntuples/new_tuples/signal_samples/Lb2chicpK_2011_2012_signal_withbdt_cut_08.root";
    const std::string treename = "withbdt";
    const std::string outFilename("/afs/cern.ch/work/a/apmorris/private/cern/ntuples/new_tuples/signal_samples/Lb2chicpK_2011_2012_signal_withbdt_cut_08_misidentification.root");
   
   
    TFile* file = TFile::Open( filename.c_str() );
    if( !file ) std::cout << "file " << filename << " does not exist" << std::endl;

    TTree* tree = (TTree*)file->Get( treename.c_str() );
    if( !tree ) std::cout << "tree " << treename << " does not exist" << std::endl;

    // -- activate the branches you need---------------------------------------------
  
    tree->SetBranchStatus("*", 1);  
    
    TFile* newFile = new TFile(outFilename.c_str(),"RECREATE");
    TTree* rTree1 = tree->CopyTree("");
    
    /*int percentCounter = 1;

    for(int i = 0; i < tree->GetEntries(); ++i){
  
      const int percent = (int)(tree->GetEntries()/100.0);
    
      if( i == percent*percentCounter ){
        //std::cout << percentCounter << " %" << std::endl;
        percentCounter++;
      }
      
      //tree->GetEntry(i);
      //rTree1->Fill();
      //std::cout << mass << std::endl;   
    }*/
    //rTree1->Print();
    rTree1->Write();
    newFile->Save();



  
    
    
    
    //This is where the misidentification is calculated for P and pi,K---------------------------
    

    const double mK(0.493677);
    const double mpi(0.13957);
    
    double proton_as_kaon_M, proton_as_pion_M, Lambda_b0_DTF_MASS_proton_as_kaon, Lambda_b0_DTF_MASS_proton_as_pion, proton_PX, proton_PY, proton_PZ, chi_c_PX, chi_c_PY, chi_c_PZ, chi_c_PE, kaon_PX, kaon_PY, kaon_PZ, kaon_PE;
	
    
    rTree1->Branch("proton_as_kaon_M", &proton_as_kaon_M, "proton_as_kaon_M/D");
    rTree1->Branch("proton_as_pion_M", &proton_as_pion_M, "proton_as_pion_M/D");
    rTree1->Branch("Lambda_b0_DTF_MASS_proton_as_kaon", &Lambda_b0_DTF_MASS_proton_as_kaon, "Lambda_b0_DTF_MASS_proton_as_kaon/D");
    rTree1->Branch("Lambda_b0_DTF_MASS_proton_as_pion", &Lambda_b0_DTF_MASS_proton_as_pion, "Lambda_b0_DTF_MASS_proton_as_pion/D");
   
    
    
    
    for(int i = 0; i < tree->GetEntries(); ++i){    
    //for event in tree
    
        tree->GetEntry(i);
        //double proton_P = sqrt(proton_PX*proton_PX + proton_PY*proton_PY + proton_PZ*proton_PZ) ;
        
        
        
        
        TLorentzVector * proton_as_kaon = new TLorentzVector(proton_PX, proton_PY, proton_PZ, sqrt(sqrt(proton_PX*proton_PX + proton_PY*proton_PY + proton_PZ*proton_PZ)*sqrt(proton_PX*proton_PX + proton_PY*proton_PY + proton_PZ*proton_PZ) + mK*mK));
        TLorentzVector * proton_as_pion = new TLorentzVector(proton_PX, proton_PY, proton_PZ, sqrt(sqrt(proton_PX*proton_PX + proton_PY*proton_PY + proton_PZ*proton_PZ)*sqrt(proton_PX*proton_PX + proton_PY*proton_PY + proton_PZ*proton_PZ) + mpi*mpi));
        
        proton_as_kaon_M = proton_as_kaon->M();
        proton_as_pion_M = proton_as_pion->M();
        
        TLorentzVector * chic_PasK_K = new TLorentzVector(((chi_c_PX)+(proton_as_kaon->Px())+(kaon_PX)), ((chi_c_PY)+(proton_as_kaon->Py())+(kaon_PY)), ((chi_c_PZ)+(proton_as_kaon->Pz())+(kaon_PZ)), ((chi_c_PE)+(proton_as_kaon->E())+(kaon_PE)));
        TLorentzVector * chic_PasPi_K = new TLorentzVector((chi_c_PX+proton_as_pion->Px()+kaon_PX), (chi_c_PY+proton_as_pion->Py()+kaon_PY), (chi_c_PZ+proton_as_pion->Pz()+kaon_PZ), (chi_c_PE+proton_as_pion->E()+kaon_PE));
        
        Lambda_b0_DTF_MASS_proton_as_kaon = chic_PasK_K->M();
        Lambda_b0_DTF_MASS_proton_as_pion = chic_PasPi_K->M();

        rTree1->Fill();
        
    }
   
    rTree1->Print();
    rTree1->Write();
    newFile->Save();



}









